#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# Support module generated by PAGE version 5.3
#  in conjunction with Tcl version 8.6
#	 Sep 15, 2020 02:27:14 PM +07  platform: Windows NT

import sys
import os
import datetime as dt
import re

try:
	import Tkinter as tk
except ImportError:
	import tkinter as tk

try:
	import ttk
	py3 = False
except ImportError:
	import tkinter.ttk as ttk
	py3 = True


def set_Tk_var():
	global Var3
	Var3 = tk.IntVar()
	global Var2
	Var2 = tk.IntVar()
	global Var7
	Var7 = tk.IntVar()
	global Var0
	Var0 = tk.IntVar()
	global install_but
	install_but = tk.StringVar()
	install_but.set('INSTALL NOW')
	global Var6
	Var6 = tk.IntVar()
	global Var1
	Var1 = tk.IntVar()
	global Var4
	Var4 = tk.IntVar()
	global Var5
	Var5 = tk.IntVar()
	global Var8
	Var8 = tk.IntVar()
	global Var9
	Var9 = tk.IntVar()

def init(top, gui, *args, **kwargs):
	global w, top_level, root
	w = gui
	top_level = top
	root = top

def install_now_but():
	os.system('clear')
	print( '------------------------------------')
	print( 'jokerpoe@SON')
	print( 'Build 25SEP2020')
	print( '[WARN] Should not use SD CARD 32GB')
	print( '------------------------------------')
	Prrocess_to_install()
	sys.stdout.flush()

def Prrocess_to_install():
	
	'''
	Var0: System-level lib + check update
	Var1: Zram + max process
	Var2: dlib + face_recognition
	Var3: OpenCV
	Var4: JTOP
	Var5: VSCODE
	Var6: UPDATE CMAKE
	Var7: WXPYTHON
	Var8: Nomachine
	Var9: Delete after completing
	'''

	start_time = dt.datetime.now()																																																																																																																							
	path = os.getcwd()
	print(os.path.join(path, 'modules'))
	os.chdir(os.path.join(path, 'modules'))
	if Var0.get():
		os.system('chmod +x Var0.sh')
		os.system('./Var0.sh')
	if Var1.get():
		os.system('chmod +x Var1.sh')
		os.system('./Var1.sh')
	if Var6.get():
		os.system('chmod +x Var6.sh')
		os.system('./Var6.sh')
	if Var7.get():
		os.system('chmod +x Var7.sh')
		os.system('./Var7.sh')
	if Var4.get():
		os.system('chmod +x Var4.sh')
		os.system('./Var4.sh')
	if Var2.get():
		os.system('chmod +x Var2.sh')
		os.system('./Var2.sh')
	if Var5.get():
		os.system('chmod +x Var5.sh')
		os.system('./Var5.sh')
	if Var3.get():
		os.system('chmod +x Var3.sh')
		os.system('./Var3.sh')
	if Var8.get():
		os.system('chmod +x Var8.sh')
		os.system('./Var8.sh')
	if Var9.get():
		os.system('sudo rm -rf opencv')
		os.system('sudo rm -rf /home/$USER/opencv_contrib')
		os.system('sudo rm -rf installSwapfile installVSCode get-pip.py')
		os.system('sudo rm -rf nomachine_6.11.2_1_arm64.deb')
		os.system('sudo apt -y autoremove')
	complete_time = dt.datetime.now() - start_time
	os.chdir(path)
	print( '------------------------------------')
	print('Compeled in: ', complete_time)
	print( '------------------------------------')
	print("INSTALLED: ", end ='')
	Check_all_lib()
	Check_with_CUDA()

def Check_library_install(Libname):
	lib_name = "/" + str(Libname) + "/"
	lib_path = "/usr/local/lib/python3.6/dist-packages" + lib_name + "/__init__.py"
	return os.path.isfile(lib_path)

def Check_all_lib():

	list_lib_2check = ["wx","dlib", "face_regcognition", "jtop", "pip", "cv2"]
	for item in list_lib_2check:
		result = Check_library_install(item)
		if result:
			print(item, end = ' ')
	if Check_VSCODE_install:
		print("Visual_Studio_code", end = ' ')
	if Check_Nomachine_install:
		print("NoMachine", end = ' ')

def Check_with_CUDA():
	print("\nCOMPLIE GPU INFORMATION:")
	import cv2
	cv_info = [re.sub('\s+', ' ', ci.strip()) for ci in cv2.getBuildInformation().strip().split('\n') 
               if len(ci) > 0 and re.search(r'(nvidia*:?)|(cuda*:)|(cudnn*:)', ci.lower()) is not None]
	cv_info = "\tOPENCV USING CUDA: " + str(cv_info)
	print(cv_info)
	try:
		import dlib
		dlib_info = "\tDLIB USING CUDA: " + str(dlib.DLIB_USE_CUDA)
	except:
		dlib_info =  "\tDLIB USING CUDA: NONE"
	print(dlib_info)

def Check_VSCODE_install():
	path_vsc_check = "/usr/share/code-oss/bin/code-oss/"
	return os.path.isfile(path_vsc_check)

def Check_Nomachine_install():
	path_vsc_check = "/usr/share/applications/NoMachine"
	return os.path.isfile(path_vsc_check)

def destroy_window():
	# Function which closes the window.
	global top_level
	top_level.destroy()
	top_level = None

if __name__ == '__main__':
	import JN_INSTALLER
	JN_INSTALLER.vp_start_gui()

	



